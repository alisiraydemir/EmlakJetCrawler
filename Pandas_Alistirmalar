# Görev 1: Seaborn kütüphanesi içerisinden Titanic veri setini tanımlayınız.

import pandas as pd
import  numpy as np
import seaborn as sns
df = sns.load_dataset("titanic")
df.head()
df.shape

# Görev 2: Titanic veri setindeki kadın ve erkek yolcuların sayısını bulunuz.

df["sex"].value_counts() #kadın ve erkek yolcuların sayısı.
df["sex"].value_counts(normalize=True) # yüzdelik için

# Görev 3: Her bir sutuna ait unique değerlerin sayısını bulunuz.

df.nunique()

# Görev 4: pclass değişkeninin unique değerlerinin sayısını bulunuz.

df["pclass"].nunique()

# Görev 5: pclass ve parch değişkenlerinin unique değerlerinin sayısını bulunuz.

df[["pclass", "parch"]].nunique()

# Görev 6: embarked değişkeninin tipini kontrol ediniz. Tipini category olarak değiştiriniz ve tekrar kontrol ediniz.

df["embarked"].dtype
df["embarked"] = df["embarked"].astype("category")
df["embarked"].dtype

# Görev 7: embarked değeri C olanların tüm bilgelerini gösteriniz.

df[df["embarked"] == "C"]

# Görev 8: embarked değeri S olmayanların tüm bilgelerini gösteriniz.

df[df["embarked"] != "S"] #fancy index diyoruz tekrar df[] alınca

# Görev 9: Yaşı 30 dan küçük ve kadın olan yolcuların tüm bilgilerini gösteriniz.

df[(df["age"] < 30) & (df["sex"] == "female")] # fancy index


# Görev 10: Fare'i 500'den büyük veya yaşı 70’den büyük yolcuların bilgilerini gösteriniz.


df[(df["fare"] > 500) | (df["age"] > 70)]


# Görev 11: Her bir değişkendeki boş değerlerin toplamını bulunuz.

df.isnull().sum()

# Görev 12: who değişkenini dataframe’den çıkarınız.
# neyi çıkarıyorsun?, satırdan mı sütundan mı?, Kalıcı olsun mu?
df.drop("who", axis=1, inplace=True)


# Görev 13: deck değikenindeki boş değerleri deck değişkenin en çok tekrar eden değeri (mode) ile doldurunuz.

# mode içerisinde beliren ilk elemanı alalım.
mode = df["deck"].mode()[0]
# boşlukları mode ile dolduralım.
df["deck"].fillna(mode, inplace=True)
# boş olan bir yer kaldı mı diye kontrol edelim.
df["deck"].isnull().value_counts()

# Görev 14: age değikenindeki boş değerleri age değişkenin medyanı ile doldurunuz.

median = df["age"].median()

df["age"].fillna(median, inplace=True)

# Görev 15: survived değişkeninin pclass ve cinsiyet değişkenleri kırılımınında sum, count, mean değerlerini bulunuz.

df.groupby(["pclass", "sex"]).agg({"survived": ["mean", "sum", "count"]})

# Görev 16: 30 yaşın altında olanlar 1, 30'a eşit ve üstünde olanlara 0 verecek bir fonksiyon yazın. Yazdığınız fonksiyonu kullanarak titanik veri
# setinde age_flag adında bir değişken oluşturunuz oluşturunuz. (apply ve lambda yapılarını kullanınız)


df["age_flag"] = df["age"]

df["age_flag"] = df["age_flag"].apply(lambda age: 1 if age < 30 else 0)

df

# df["age_flag"] = df["age_flag"].mask(lambda age: age < 30, 0)
# df["age_flag"] = df["age_flag"].mask(lambda age: age > 30, 1)


# Görev 17: Seaborn kütüphanesi içerisinden Tips veri setini tanımlayınız.
import numpy as np
import seaborn as sns

df = sns.load_dataset("Tips")

df["time"].value_counts()
# Görev 18: Time değişkeninin kategorilerine (Dinner, Lunch) göre total_bill değerinin sum, min, max ve mean değerlerini bulunuz.

df.groupby(["time"]).agg({"total_bill": ["sum", "min", "max"]})

#Görev 19: Day ve time’a göre total_bill değerlerinin sum, min, max ve mean değerlerini bulunuz.

df.groupby(["day", "time"]).agg({"total_bill": ["sum", "min", "max", "mean"]})

# Görev 20: Lunch zamanına ve kadın müşterilere ait total_bill ve tip değerlerinin day'e göre sum, min, max ve mean değerlerini bulunuz.

df.query('time == "Lunch" & sex == "Female"').groupby(["day"]).agg({"total_bill": ["sum", "min", "max", "mean"]})
df

# Görev 21: size'i 3'ten küçük, total_bill'i 10'dan büyük olan siparişlerin ortalaması nedir? (loc kullanınız)

df["size"].dtype
df["total_bill"].dtype

df.loc[(df["size"] < 3) & (df["total_bill"] > 10), ["size", "total_bill"]].mean()

# Görev 22: total_bill_tip_sum adında yeni bir değişken oluşturunuz. Her bir müşterinin ödediği totalbill ve tip in toplamını versin.

df["total_bill_tip_sum"] = df["total_bill"]
df["total_bill_tip_sum"] = df["total_bill"] + df["tip"]


# Görev 23: Total_bill değişkeninin kadın ve erkek için ayrı ayrı ortalamasını bulunuz. Bulduğunuz ortalamaların altında olanlara 0, üstünde ve eşit
# olanlara 1 verildiği yeni bir total_bill_flag değişkeni oluşturunuz.
# Kadınlar için Female olanlarının ortalamaları, erkekler için ise Male olanların ortalamaları dikkate alınacktır. Parametre olarak cinsiyet ve total_bill
# alan bir fonksiyon yazarak başlayınız. (If-else koşulları içerecek)

f_avg = df[df["sex"] == "Female"]["total_bill"].mean()
m_avg = df[df["sex"] == "Male"]["total_bill"].mean()

def my_func(sex, total_bill):
    if sex == "Female":
        if total_bill >= f_avg:
            return 1
        else:
            return 0
    else:
        if total_bill >= m_avg:
            return 1
        else:
            return 0
df["total_bill_flag"] = df.apply(lambda x: my_func(x["sex"], x["total_bill"]), axis=1)

# df çağırıldığında x lerin her bir satırı dataframin her bir satırı olur.
# yani satır boyunca itterate eder.
# bu sebeple axis=1 olmalı ki değişkenleri sütundan çeksin ve içine girsin.
# total_bill_mean = df.groupby(["sex"]).agg({"total_bill": ["mean"]}) # ilk elemanı burada seçemeyiz keyError veriyor.
# total_bill_mean_1 = df.groupby("sex")["total_bill"].mean() # o yüzden bu kullanımı tercih ediyorum.
# male_mean = total_bill_mean_1[1]
# female_mean = total_bill_mean_1[0]
# df["total_bill_flag"] = df["total_bill"]
# df['total_bill_flag'] = np.where((((df['sex'] == 'Male') & (df['total_bill'] > male_mean)) | (df['sex'] == 'Female') & (df['total_bill'] > female_mean)), 1, 0)

# Görev 24: total_bill_flag değişkenini kullanarak cinsiyetlere göre ortalamanın altında ve üstünde olanların sayısını gözlemleyiniz.

df.groupby(["sex"])["total_bill_flag"].value_counts()


# Görev 25: Veriyi total_bill_tip_sum değişkenine göre büyükten küçüğe sıralayınız ve ilk 30 kişiyi yeni bir dataframe'e atayınız.

df.sort_values("total_bill_tip_sum", ascending=False).head(30)

df["total_bill_tip_sum"].sort_values(ascending=False).head(30)

# ascending=False olursa büyükten küçüğe doğru sıralar.
